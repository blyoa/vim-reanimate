*reanimate.txt*	Vim の保存・復元を行う Vimプラグインです。



==============================================================================
目次						*reanimate-contents*

概要				|reanimate-introduction|
使い方				|reanimate-usage|
インターフェース		|reanimate-interface|
  コマンド			  |reanimate-commands|
  関数				  |reanimate-functions|
  |untie.vim|			  |untie-reanimate|
設定				|reanimate-setting|
  変数				  |reanimate-variables|
保存・復元データ		|reanimate-save-data|
vimrc_local			|reanimate-vimrc_local|
イベントのフック		|reanimate-events|
  イベントの登録		  |reanimate-events-register|
  コンテキスト			  |reanimate-events-context|
  フックポイント		  |reanimate-events-point|
  保存を行うデータに関して	  |reanimate-events-savedata|


==============================================================================
概要						*reanimate-introduction*

|reanimate| は現在の Vim の状況を名前を付けて保存し、復元を行うプラグインです。

						*reanimate-synopsis*
>
	" 現在の状態を保存する
	:ReanimateSave

	" 保存した状態を復元する
	:ReanimateLoad

	" 現在の状態を名前を付けて保存する
	:ReanimateSave {保存名}

	" 指定した名前の状態を復元する
	:ReanimateLoad {復元名}
	
	" unite.vim で保存しているデータの一覧を出力する
	:Unite reanimate
<


==============================================================================
使い方						*reanimate-usage*

|:ReanimateSave| で保存を行い |:ReanimateLoad| で復元を行います。
|:ReanimateSave| では、名前を指定して保存を行うことが出来るので、複数の状態を
保存して、復元することが出来ます。

>
	" reanimate という名前で保存を行い
	:ReanimateSave reanimate

	" reanimate という名前で復元を行う
	:ReanimateLoad reanimate
<

保存されているデータの一覧は unite.vim を使用して出力する事が出来ます。
参照: |reanimate-unite|


==============================================================================
インターフェース				*reanimate-interface*

------------------------------------------------------------------------------
コマンド					*reanimate-commands*

:ReanimateSave [{名前}]				*:ReanimateSave*
	現在の状態を名前を付けて保存します。
	|:ReanimateLoad| で保存した状態の復元を行います。
	引数がない場合は |g:reanimate_default_save_name| の値が使用されます。

:ReanimateLoad [{名前}]				*:ReanimateLoad*
	保存した状態の復元を行います。
	|:ReanimateSave| で状態の保存を行います。
	引数がない場合は |g:reanimate_default_save_name| の値が使用されます。

:ReanimateSaveInput				*:ReanimateSaveInput*
	コマンドの呼び出し時に名前の入力を行なって保存します。
	それ以外は |:ReanimateSave| と同じです。

:ReanimateLoadInput				*:ReanimateLoadInput*
	コマンドの呼び出し時に名前の入力を行なって保存します。
	それ以外は |:ReanimateLoad| と同じです。

:ReanimateLoadLatest				*:ReanimateLoadLatest*
	最後に保存した（更新日が一番新しい）名前で復元を行います。
	※ :ReanimateLoad latest とは違うので注意

:ReanimateSaveCursorHold			*:ReanimateSaveCursorHold*
	|autocmd| |CursorHold| で保存を行う場合に使用するコマンド
	|autocmd| |CursorHold| で自動的に保存を行いたい場合は、
	|:ReanimateSave| ではなく |:ReanimateSaveCursorHold| を使用して下さ
	い。

:ReanimateSwitch [{名前}]			*:ReanimateSwitch*
	保存を行なってから復元を行います。

:ReanimateEditVimrcLocal			*:ReanimateEditVimrcLocal*
	vimrc_local.vim の編集を行います。
	vimrc_local.vim については |reanimate-vimrc_local| を参照して下さい。


------------------------------------------------------------------------------
関数						*reanimate-functions*

reanimate#save([{保存名}])			*reanimate#save()*
	|:ReanimateSave| の関数版です。
	引数がない場合は |g:reanimate_default_save_name| の値が使用されます。

reanimate#load([{保存名}])			*reanimate#load()*
	|:ReanimateLoad| の関数版です。
	引数がない場合は |g:reanimate_default_save_name| の値が使用されます。


------------------------------------------------------------------------------
|untie.vim|					*untie-reanimate*

Shougo 氏が作成された |unite.vim| を使用することで保存されているデータの一覧を出
力し、復元する事が出来ます。

unite.vim - github : https://github.com/Shougo/unite.vim

image : http://f.hatena.ne.jp/osyo-manga/20120214213757

>
	:Unite reanimate
<


unite-actions					*reanimate-unite-actions*

|unite-reanimate| で使用出来る |unite-actions| がいくつが定義されています。

- "reanimate_load"
	選択した名前を復元する。
	それ以外は |:ReanimateLoad| と同じです。

- "reanimate_save"
	選択した名前で保存する。
	それ以外は |:ReanimateSave| と同じです。

- "reanimate_new_save"
	名前を付けて保存する。
	これは選択した名前は関係ないです。

- "reanimate_switch"
	復元する前に現在の状態の保存を行い、その後、選択した名前で復元する。
	それ以外は |:ReanimateSwitch| と同じです。


また、|unite-reanimate| はデフォルトアクションが設定されていません。
上記のアクションを使用する場合は、|unite.vim| のアクションメニュー(Aキー)
から上記のアクションを選択して使用します。
もしくは、下記のように |unite.vim| の呼び出し時に default-action を設定して使用
します。

>
	" デフォルトで保存する
	:Unite reanimate -default-action=reanimate_load
	
	" デフォルトで復元する
	:Unite reanimate -default-action=reanimate_save
<


==============================================================================
設定						*reanimate-setting*

------------------------------------------------------------------------------
変数						*reanimate-variables*

g:reanimate_save_dir				*g:reanimate_save_dir*
	状態を保存するディレクトリです。
>
	" Default
	let g:reanimate_save_dir = "~/reanimate/save_dir"
<

g:reanimate_default_save_name		*g:reanimate_default_save_name*
	|ReanimateSave| で引数がなかった場合に使用されるデフォルトの保存名で
	す。
>
	" Default
	let g:reanimate_default_save_name = "latest"
<

g:reanimate_sessionoptions			*g:reanimate_sessionoptions*
	セッションの保存時に使用されるオプションです。
	設定するオプションは |'sessionoptions'| と同じです。
>
	" Default
	let g:reanimate_sessionoptions = &sessionoptions
	
	" Example
	let g:reanimate_sessionoptions = "curdir,folds,help,slash,tabpages,winsize"
<

g:reanimate_disables				*g:reanimate_disables*
	保存・復元を行わないデータを無効にする為の変数です。
	各データの詳細は |reanimate-save-data| を参照して下さい。
>
	" Default
	let g:reanimate_disables = []
	
	" Example
	" session と window の保存・復元が行われません
	let g:reanimate_disables = ["reanimate_session", "reanimate_window"]
<


==============================================================================
保存・復元データ				*reanimate-save-data*

保存・復元が行われるデータです。
このデータは |g:reanimate_disables| に設定することで無効することが出来ます。


- "session"					*reanimate-session*

|session| のデータを保存し、復元を行います。
|session| のオプションは |g:reanimate_sessionoptions| の値が参照されます。

Disable: >
	reanimate_session
<


- "viminfo"					*reanimate-viminfo*

|viminfo| のデータを保存し、復元を行います。

Disable: >
	reanimate_viminfo
<


- "window"					*reanimate-window*

gvim のウィンドウ位置とサイズを保存し、復元を行います。
参照: http://vim-users.jp/2010/01/hack120/

Disable: >
	reanimate_window
<


==============================================================================
vimrc_local					*reanimate-vimrc_local*

各データのディレクトリの直下に vimrc_local.vim ファイルを作成する
ことで、保存データを復元する際に vimrc_local.vim が読み込まれます。
各データごとに固有の設定を行いたい場合にはこれを使用して下さい。
vimrc_local.vim の編集は |:ReanimateEditVimrcLocal| で行えます。


==============================================================================
イベントのフック				*reanimate-events*

|reanimate.vim| では各処理が行われるタイミングに処理をフックする事が出来ます。


------------------------------------------------------------------------------
イベントの登録					*reanimate-events-register*

イベントを登録する場合、

1．|reanimate-events-point| + 関数の参照を渡して定義する
2．各 |reanimate-events-point| 名の関数を定義した辞書を登録
3．autoload/reanimate/events/{events-name}.vim を作成する

の3つの方法があります。


- 1．|reanimate-events-point| + 関数の参照を渡して定義する

reanimate({point-name}, {event-name}, {Funcref}) で任意のポイントに関数をフッ
クします。
関数には |reanimate-events-context| を引数で受け取ります。

Example >
	" メッセージ出力
	" 関数の引数には context を受け取る
	function! SuccessMessage(context)
	echom "復元が成功しました"
	endfunction
	
	" 復元が終わった後に SuccessMessage が呼ばれる
	call reanimate#hook("load_post", "success_message", function("SuccessMessage") )
<


- 2．|reanimate-events-point| 名の関数を定義した辞書を登録

reanimate({event-dict}) で任意のポイントに処理をフッ
必要な |reanimate-events-point| の名前を持った辞書関数を定義を定義し、
reanimate#hook({event-dict}) に渡すことで登録を行うことができます。
また、辞書関数には |reanimate-events-context| を引数で受け取ります。

Example >
	" session の保存、復元を行う
	let s:event = {
	\	"name" : "session",
	\}
	
	" 必要なポイント名の関数を定義
	" 引数に context を受け取る
	
	" load
	function! s:event.load(context)
		" session の読み込み処理を記述
		" 読み込み先は context.path のディレクトリパスを参照
	endfunction
	
	" save
	function! s:event.save(context)
		" session の保存処理を記述
		" 保存先は context.path のディレクトリパスを参照
	endfunction
	endfunction
	
	" reanimate.vim に登録
	call reanimate#hook(s:event)
	unlet s:event
<


- 3．autoload/reanimate/events/{events-name}.vim を作成する

autoload/reanimate/events/{events-name}.vim ファイル内に 2．で作成したような
辞書を返す reanimate#events#{events-name}#define() 関数を作成します。
これで |reanimate.vim| の初回ロード時に自動的に登録されます。

Example >
	" autoload/reanimate/events/window.vim

	function! reanimate#events#window#define()
		return s:event
	endfunction
	
	
	let s:event = {
	\	"name" : "reanimate_window"
	\}
	" ... s:event の実装
<

------------------------------------------------------------------------------
コンテキスト				*reanimate-events-context*

各イベントの関数で受け取る context は次のようなデータを保持しています。

- "point"
  保存名です。

- "path"
  保存するデータのディレクトリパスです

- "point_path"
  全てのデータが保存されているディレクトリです。
  path とは階層が異なるので注意して下さい。


------------------------------------------------------------------------------
フックポイント				*reanimate-events-point*

各イベントが呼ばれるタイミングです。
辞書関数の名前や登録時に使用される名前にもなります。


- "save_leave"					*reanimate-events-point-save_leave*
  現在とは違う名前で保存する場合に呼ばれます。
  これは |reanimate-events-point-save_pre| の前に呼ばれます。

- "save_pre"					*reanimate-events-point-save_pre*
  |reanimate-events-point-save| の前に呼ばれます。
  保存する前に何か問題がある場合に |throw| することで、以降の処理を中断するこ
  とができます。

- "save"					*reanimate-events-point-save*
  保存が行われる時です。
  この時にデータの保存を行なって下さい。

- "save_post"					*reanimate-events-point-save_post*
  |reanimate-events-point-save| の後に呼ばれます。

- "save_enter"					*reanimate-events-point-save_enter*
  現在とは違う名前で保存する場合に呼ばれます。
  これは |reanimate-events-point-save_post| の後に呼ばれます。

- "save_failed"					*reanimate-events-point-save_failed*
  |reanimate-events-point-save_pre|
  |reanimate-events-point-save|
  |reanimate-events-point-save_post|
  のいずれかで例外が発生した場合に呼ばれます。


- "load_leave"					*reanimate-events-point-load_leave*
  現在とは違う名前で保存する場合に呼ばれます。
  これは |reanimate-events-point-load_pre| の前に呼ばれます。

- "load_pre"					*reanimate-events-point-load_pre*
  |reanimate-events-point-load| の前に呼ばれます。
  保存する前に何か問題がある場合に |throw| することで、以降の処理を中断するこ
  とができます。

- "load"					*reanimate-events-point-load*
  読み込みが行われる時です。
  この時に |reanimate-events-point-load| で保存したデータの読み込みを行なって
  下さい。

- "load_post"					*reanimate-events-point-load_post*
  |reanimate-events-point-load| の後に呼ばれます。

- "load_enter"					*reanimate-events-point-load_enter*
  現在とは違う名前で保存する場合に呼ばれます。
  これは |reanimate-events-point-load_post| の後に呼ばれます。

- "load_failed"					*reanimate-events-point-load_failed*
  |reanimate-events-point-load_pre|
  |reanimate-events-point-load|
  |reanimate-events-point-load_post|
  のいずれかで例外が発生した場合に呼ばれます。


------------------------------------------------------------------------------
保存を行うデータに関して			*reanimate-events-savedata*

|reanimate.vim| では各保存データごとに保存する場所が決まっています。
イベント内で独自のデータを保存したい場合は、context.path のディレクトリに保存
を行なって下さい。

Example >
	" viminfo を保存
	function! s:event.save(context)
		let dir = a:context.path
		if !filereadable(dir.'/viminfo.vim') || filewritable(dir.'/viminfo.vim')
			execute "wviminfo!  ".dir."/viminfo.vim"
		endif
	endfunction

	" viminfo を復元
	function! s:event.load(context)
		let dir = a:context.path
		if filereadable(dir."/viminfo.vim")
			execute "rviminfo ".dir."/viminfo.vim"
		endif
	endfunction
<


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
